<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Testing on 7nolikov | Dmitrii Novikov</title>
    <link>http://localhost:1313/categories/testing/</link>
    <description>Recent content in Testing on 7nolikov | Dmitrii Novikov</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <managingEditor>7nolikov@gmail.com (Dmitrii Novikov)</managingEditor>
    <webMaster>7nolikov@gmail.com (Dmitrii Novikov)</webMaster>
    <copyright>Dmitrii Novikov</copyright>
    <lastBuildDate>Mon, 01 Jan 0001 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/categories/testing/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Testcontainers Docker Compose module</title>
      <link>http://localhost:1313/posts/testcontainers-docker-compose-module/</link>
      <pubDate>Sun, 15 Dec 2024 00:00:00 +0000</pubDate><author>7nolikov@gmail.com (Dmitrii Novikov)</author>
      <guid>http://localhost:1313/posts/testcontainers-docker-compose-module/</guid>
      <description>&lt;p&gt;Using &lt;strong&gt;Docker Compose module&lt;/strong&gt; with Testcontainers you can simplify testing for applications that rely on multiple services like:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Databases&lt;/li&gt;&#xA;&lt;li&gt;APIs&lt;/li&gt;&#xA;&lt;li&gt;Message queues&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;This approach ensures that all dependencies start and work together as expected in a controlled, reproducible environment during your Java tests.&lt;/p&gt;&#xA;&lt;h3 id=&#34;key-features-of-the-docker-compose-module&#34; class=&#34;scroll-mt-8 group&#34;&gt;&#xA;  Key features of the Docker Compose module&#xA;  &#xA;    &lt;a href=&#34;#key-features-of-the-docker-compose-module&#34;&#xA;        class=&#34;no-underline hidden opacity-50 hover:opacity-100 !text-inherit group-hover:inline-block&#34;&#xA;        aria-hidden=&#34;true&#34; title=&#34;Link to this heading&#34; tabindex=&#34;-1&#34;&gt;&#xA;        &lt;svg&#xA;  xmlns=&#34;http://www.w3.org/2000/svg&#34;&#xA;  width=&#34;16&#34;&#xA;  height=&#34;16&#34;&#xA;  fill=&#34;none&#34;&#xA;  stroke=&#34;currentColor&#34;&#xA;  stroke-linecap=&#34;round&#34;&#xA;  stroke-linejoin=&#34;round&#34;&#xA;  stroke-width=&#34;2&#34;&#xA;  class=&#34;lucide lucide-link w-4 h-4 block&#34;&#xA;  viewBox=&#34;0 0 24 24&#34;&#xA;&gt;&#xA;  &lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; /&gt;&#xA;  &lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; /&gt;&#xA;&lt;/svg&gt;&#xA;&#xA;    &lt;/a&gt;&#xA;  &#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;It allows you to define complex service dependencies in a single docker-compose.yml file.&lt;/li&gt;&#xA;&lt;li&gt;During tests, Testcontainers can automatically start all services defined in the Compose file.&lt;/li&gt;&#xA;&lt;li&gt;It ensures your test environment is isolated and reproducible.&lt;/li&gt;&#xA;&lt;li&gt;The module also provides Java APIs to control the containers and check their status during tests.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;how-to-use-the-docker-compose-module&#34; class=&#34;scroll-mt-8 group&#34;&gt;&#xA;  How to use the Docker Compose module&#xA;  &#xA;    &lt;a href=&#34;#how-to-use-the-docker-compose-module&#34;&#xA;        class=&#34;no-underline hidden opacity-50 hover:opacity-100 !text-inherit group-hover:inline-block&#34;&#xA;        aria-hidden=&#34;true&#34; title=&#34;Link to this heading&#34; tabindex=&#34;-1&#34;&gt;&#xA;        &lt;svg&#xA;  xmlns=&#34;http://www.w3.org/2000/svg&#34;&#xA;  width=&#34;16&#34;&#xA;  height=&#34;16&#34;&#xA;  fill=&#34;none&#34;&#xA;  stroke=&#34;currentColor&#34;&#xA;  stroke-linecap=&#34;round&#34;&#xA;  stroke-linejoin=&#34;round&#34;&#xA;  stroke-width=&#34;2&#34;&#xA;  class=&#34;lucide lucide-link w-4 h-4 block&#34;&#xA;  viewBox=&#34;0 0 24 24&#34;&#xA;&gt;&#xA;  &lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; /&gt;&#xA;  &lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; /&gt;&#xA;&lt;/svg&gt;&#xA;&#xA;    &lt;/a&gt;&#xA;  &#xA;&lt;/h3&gt;&#xA;&lt;h4 id=&#34;add-testcontainers-dependency&#34; class=&#34;scroll-mt-8 group&#34;&gt;&#xA;  Add Testcontainers Dependency&#xA;  &#xA;    &lt;a href=&#34;#add-testcontainers-dependency&#34;&#xA;        class=&#34;no-underline hidden opacity-50 hover:opacity-100 !text-inherit group-hover:inline-block&#34;&#xA;        aria-hidden=&#34;true&#34; title=&#34;Link to this heading&#34; tabindex=&#34;-1&#34;&gt;&#xA;        &lt;svg&#xA;  xmlns=&#34;http://www.w3.org/2000/svg&#34;&#xA;  width=&#34;16&#34;&#xA;  height=&#34;16&#34;&#xA;  fill=&#34;none&#34;&#xA;  stroke=&#34;currentColor&#34;&#xA;  stroke-linecap=&#34;round&#34;&#xA;  stroke-linejoin=&#34;round&#34;&#xA;  stroke-width=&#34;2&#34;&#xA;  class=&#34;lucide lucide-link w-4 h-4 block&#34;&#xA;  viewBox=&#34;0 0 24 24&#34;&#xA;&gt;&#xA;  &lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; /&gt;&#xA;  &lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; /&gt;&#xA;&lt;/svg&gt;&#xA;&#xA;    &lt;/a&gt;&#xA;  &#xA;&lt;/h4&gt;&#xA;&lt;p&gt;Include the Testcontainers library in your pom.xml (for Maven) or build.gradle (for Gradle):&lt;/p&gt;</description>
    </item>
    <item>
      <title>Standalone Spring tests</title>
      <link>http://localhost:1313/posts/standalone-spring-tests/</link>
      <pubDate>Wed, 04 Dec 2024 00:00:00 +0000</pubDate><author>7nolikov@gmail.com (Dmitrii Novikov)</author>
      <guid>http://localhost:1313/posts/standalone-spring-tests/</guid>
      <description>&lt;p&gt;I was surprised that Spring Test library doesn&amp;rsquo;t support standalone acceptance tests format out of the box.&#xA;Here&amp;rsquo;s how I tackled this issue and why standalone tests are useful for modular Spring applications.&lt;/p&gt;&#xA;&lt;h3 id=&#34;motivation&#34; class=&#34;scroll-mt-8 group&#34;&gt;&#xA;  Motivation&#xA;  &#xA;    &lt;a href=&#34;#motivation&#34;&#xA;        class=&#34;no-underline hidden opacity-50 hover:opacity-100 !text-inherit group-hover:inline-block&#34;&#xA;        aria-hidden=&#34;true&#34; title=&#34;Link to this heading&#34; tabindex=&#34;-1&#34;&gt;&#xA;        &lt;svg&#xA;  xmlns=&#34;http://www.w3.org/2000/svg&#34;&#xA;  width=&#34;16&#34;&#xA;  height=&#34;16&#34;&#xA;  fill=&#34;none&#34;&#xA;  stroke=&#34;currentColor&#34;&#xA;  stroke-linecap=&#34;round&#34;&#xA;  stroke-linejoin=&#34;round&#34;&#xA;  stroke-width=&#34;2&#34;&#xA;  class=&#34;lucide lucide-link w-4 h-4 block&#34;&#xA;  viewBox=&#34;0 0 24 24&#34;&#xA;&gt;&#xA;  &lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; /&gt;&#xA;  &lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; /&gt;&#xA;&lt;/svg&gt;&#xA;&#xA;    &lt;/a&gt;&#xA;  &#xA;&lt;/h3&gt;&#xA;&lt;p&gt;My project separates core logic from cloud-specific modules. Usual Spring Test doesn&amp;rsquo;t work for this. I needed standalone tests to validate HTTP status codes and response content as black-box tests.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
